name: SonarQube Analysis

on:
  push:
    branches:
      - main


env:

  OIDC: arn:aws:iam::817091419779:role/ac_customer_american_chip

 
jobs:
  sonarqube:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: 'configure AWS credentials'
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          role-to-assume: ${{ env.OIDC }} 
          role-session-name: 'commit=${{ github.sha }}'
          role-duration-seconds: 1100
          aws-region:  us-east-1  

      - name: Create projet
        run: | 
          repository=$(basename $GITHUB_REPOSITORY)
          echo "Repository: $repository"
          curl -u squ_93d1c1e8c504da03350e6f76f9a69ae606ef4c6a: -X POST "https://dora.beta.americanchip.io/api/projects/create?project=$repository&name=$repository"

      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Set up SonarQube
        run: |
          wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.6.0.2311-linux.zip
          unzip sonar-scanner-cli-4.6.0.2311-linux.zip
          mv sonar-scanner-4.6.0.2311-linux /opt/sonar-scanner
          echo "export PATH=/opt/sonar-scanner/bin:$PATH" >> $HOME/.bashrc
          source $HOME/.bashrc

      - name: Generate UUID
        run: |
          uuidgen > uuid.txt
          echo "UUID=$(cat uuid.txt)" >> $GITHUB_ENV
          echo "CURRENT_TIME=$(date +"%Y-%m-%d-%H:%M:%S")" >> $GITHUB_ENV
          echo "CURRENT_TIME_ISO=$(date -u +"%Y-%m-%dT%H:%M:%SZ")" >> $GITHUB_ENV
          echo "S3_KEY_DATE=$(date +"%Y/%m/%d")" >> $GITHUB_ENV

      - name: Run SonarQube Analysis
        run: |
          repository=$(basename $GITHUB_REPOSITORY)
          echo "Repository: $repository"

          /opt/sonar-scanner/bin/sonar-scanner \
            -Dsonar.projectKey=$repository \
            -Dsonar.projectName=$repository \
            -Dsonar.projectVersion=1.0 \
            -Dsonar.sources=. \
            -Dsonar.language=python \
            -Dsonar.host.url=https://dora.beta.americanchip.io \
            -Dsonar.login=squ_93d1c1e8c504da03350e6f76f9a69ae606ef4c6a 

      - name: Make API Request

        run: |
          python - <<EOF
          import requests

          response = requests.get("https://dora.beta.americanchip.io/api/hotspots/search?projectKey=customers", auth=("squ_93d1c1e8c504da03350e6f76f9a69ae606ef4c6a", ""))
          json_data = response.json()
          print(json_data)
          hotspots = json_data["hotspots"]
          # Generate the HTML table
          html = "<table>\n"
          html += "    <thead>\n"
          html += "        <tr>\n"
          html += "            <th>Key</th>\n"
          html += "            <th>Component</th>\n"
          html += "            <th>Project</th>\n"
          html += "            <th>Security Category</th>\n"
          html += "            <th>Vulnerability Probability</th>\n"
          html += "            <th>Status</th>\n"
          html += "            <th>Line</th>\n"
          html += "            <th>Message</th>\n"
          html += "        </tr>\n"
          html += "    </thead>\n"
          html += "    <tbody>\n"

          # Iterate over each hotspot and generate table rows
          for hotspot in hotspots:
              key = hotspot["key"]
              component = hotspot["component"]
              project = hotspot["project"]
              security_category = hotspot["securityCategory"]
              vulnerability_probability = hotspot["vulnerabilityProbability"]
              status = hotspot["status"]
              line = hotspot["line"]
              message = hotspot["message"]

              html += "        <tr>\n"
              html += f"            <td>{key}</td>\n"
              html += f"            <td>{component}</td>\n"
              html += f"            <td>{project}</td>\n"
              html += f"            <td>{security_category}</td>\n"
              html += f"            <td>{vulnerability_probability}</td>\n"
              html += f"            <td>{status}</td>\n"
              html += f"            <td>{line}</td>\n"
              html += f"            <td>{message}</td>\n"
              html += "        </tr>\n"

          html += "    </tbody>\n"
          html += "</table>"

          # Generate an HTML file with the table
          with open("output.html", "w") as file:
              file.write(f"<html>\n"
                         f"<head>\n"
                         f"    <title>JSON to HTML</title>\n"
                         f"    <style>\n"
                         f"        table {{\n"
                         f"            border-collapse: collapse;\n"
                         f"            width: 100%;\n"
                         f"        }}\n"
                         f"        th, td {{\n"
                         f"            border: 1px solid #ddd;\n"
                         f"            padding: 8px;\n"
                         f"            text-align: left;\n"
                         f"        }}\n"
                         f"    </style>\n"
                         f"</head>\n"
                         f"<body>\n"
                         f"    <h1>JSON to HTML Example</h1>\n"
                         f"    {html}\n"
                         f"</body>\n"
                         f"</html>")

          EOF


      - name: Upload Report to S3
        run: |
          repo_name=$(basename $GITHUB_REPOSITORY)"_sonar"
          S3_REMOTE_KEY=sonar/repositories/${{env.S3_KEY_DATE}}/${{env.CURRENT_TIME}}-${repo_name}
          aws s3 cp ${workspace}/repo-to-scan/report-${repo_name}.html s3://prod-scan-result/${S3_REMOTE_KEY}.html